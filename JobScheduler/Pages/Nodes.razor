@page "/nodes"
@inject NodesMethods nodesMethods
@inject GroupsMethods groupMethods 

<AuthorizeView Roles="Admin, Editor">
    <h3>Nodes</h3>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Friendly Name</th>
                <th>IP</th>
                <th>Port</th>
                <th>Groups</th>
                <th>Role</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Node node in ExistingNodes)
            {
                <tr>
                    <td>@node.Id</td>
                    <td>@node.Name</td>
                    <td>@node.IPStr</td>
                    <td>@node.Port</td>
                    <td>
                        @if (node.Group != null)
                        {<span>@string.Join(",", node.Group.Select(x => x.Name))</span>}
                </td>
                <td>@node.Role</td>
                <td>
                    <button class="btn btn-primary"
                            @onclick="(() => { IsEditNode = true; EditNode(node); })">
                        Edit
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    @if (ShowPopup)
    {
        <!-- This is the popup to create or edit a node -->
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">@DialogTitle</h3>
                        <!-- Button to close the popup -->
                        <button type="button" class="close" @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <!-- Edit form for the current node -->
                    <div class="modal-body">
                        <!-- Only show Id if not a new node -->
                        @if (CurrentNode.Id != 0)
                        {
                            <p>Id: @CurrentNode.Id</p>
                        }
                        Name: <input class="form-control" type="text"
                                     placeholder="Name"
                                     @bind="CurrentNode.Name" />
                        IP: <input class="form-control" type="text"
                                   placeholder="IP"
                                   @bind="CurrentNode.IPStr" />
                        Port: <input class="form-control" type="text"
                                     placeholder="eg. 8080"
                                     @bind="CurrentNode.Port" />
                        Group: <br/>@foreach (Group group in ExistingGroups)
                        {
                            <input type="checkbox" id="@group.Id" name="@group.Name" value="@group.Name" @bind="@group.IsChecked" /> @group.Name
                            <br>}
                        Role: <select class="form-control"
                                      @bind="@CurrentNodeRole">
                            @foreach (string option in AvailableRoles)
                            {
                                <option value="@option">
                                    @option
                                </option>
                            }
                        </select>
                        <br /><br />
                        <!-- Button to save the node -->
                        <button class="btn btn-primary"
                                @onclick="SaveNode">
                            Save
                        </button>
                        <!-- Only show delete button if not a new record -->
                        @if (IsEditNode)
                        {
                            <!-- Button to delete the node -->
                            <button class="btn btn-danger"
                                    @onclick="DeleteNode">
                                Delete
                            </button>
                        }
                        <br/>
                        <span style="color:red">@ErrorMessage</span>
                    </div>
                </div>
            </div>
        </div>
    }
    <button class="btn btn-success" @onclick="AddNewNode">Add Node</button>
</AuthorizeView>

@code {
    private string DialogTitle = "New Node";
    private List<Node> ExistingNodes = new List<Node>();
    private List<Group> ExistingGroups = new List<Group>();
    private bool IsEditNode = false;
    private Node CurrentNode = new Node();
    private bool ShowPopup = false;
    private string ErrorMessage = string.Empty;
    private string CurrentNodeRole = string.Empty;
    private List<string> AvailableRoles = new List<string>() { "Master", "Slave" };

    protected override async Task OnInitializedAsync()
    {
        await GetNodes();
        await GetGroups();
    }

    private void AddNewNode()
    {
        CurrentNode = new Node();
        DialogTitle = "New Node";
        CurrentNodeRole = "Slave";
        ShowPopup = true;
    }

    private async void SaveNode()
    {
        if (IsEditNode)
        {
            CurrentNode.IP = null;
            CurrentNode.Group = ExistingGroups.Where(x => x.IsChecked).ToList();
            var response = await nodesMethods.EditNodeAsync(CurrentNode.Id, CurrentNode);
            if (response != null)
            {
                ClosePopup();
            }
            else ErrorMessage = "Error: Could not edit this node.";
        }
        else
        {
            CurrentNode.Role = CurrentNodeRole == "Master" ? NodeRole.Master : NodeRole.Slave;
            var node = new Node { Name = CurrentNode.Name, IPStr = CurrentNode.IPStr, Role = CurrentNode.Role, Group = ExistingGroups.Where(x => x.IsChecked).ToList() };

            var response = await nodesMethods.CreateNodeAsync(node);
            if (response)
                ClosePopup();
            else ErrorMessage = "Error: Could not create this node.";
        }
    }

    private async void DeleteNode()
    {
        await nodesMethods.DeleteNodeAsync(CurrentNode.Id);
        ClosePopup();
    }

    private async void ClosePopup()
    {
        ShowPopup = false;
        IsEditNode = false;
        CurrentNode = new Node();
        ErrorMessage = string.Empty;

        StateHasChanged();

        await GetNodes();
    }

    private async Task GetNodes()
    {
        ExistingNodes = (await nodesMethods.GetNodesAsync()).ToList();
        StateHasChanged();
    }

    private async Task GetGroups()
    {
        ExistingGroups = (await groupMethods.GetGroupsAsync()).ToList();
    }

    private void EditNode(Node node)
    {
        CurrentNode = node;
        DialogTitle = "Edit Node";
        CurrentNodeRole = node.Role == 0 ? "Master" : "Slave";
        ShowPopup = true;

        //TODO
        //if (node.Group != null)
        //    CurrentNodeGroup = string.Join(",", node.Group);
    }
}
