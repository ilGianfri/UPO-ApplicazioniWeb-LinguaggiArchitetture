@page "/jobs"
@inject IHttpContextAccessor httpContextAccessor
@inject JobsMethods jobsMethods
@inject GroupsMethods groupsMethods

<AuthorizeView Roles="Admin, Editor">
    <h3>Jobs</h3>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Path</th>
                <th>Parameters</th>
                <th>Group</th>
                <th>Status</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Job job in ExistingJobs)
            {
                <tr>
                    <td>@job.Id</td>
                    <td>@job.Path</td>
                    <td>@job.Parameters</td>
                    <td>@if (job.Group != null)@job.Group.Name</td>
                    <td>@job.Status</td>
                    <td>
                        <button class="btn btn-primary"
                                @onclick="(() => { IsEditJob = true; EditJob(job); })">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (ShowPopup)
    {
        <!-- This is the popup to create or edit a node -->
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">@DialogTitle</h3>
                        <!-- Button to close the popup -->
                        <button type="button" class="close"
                                @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <!-- Edit form for the current node -->
                    <div class="modal-body">
                        <!-- Only show Id if not a new node -->
                        @if (CurrentJob.Id != 0)
                        {
                            <p>Id: @CurrentJob.Id</p>
                        }
                        Path: <input class="form-control" type="text"
                                     placeholder="Path"
                                     @bind="CurrentJob.Path" />
                        Parameters: <input class="form-control" type="text"
                                           placeholder="Parameters"
                                           @bind="CurrentJob.Parameters" />
                        Group: <br/><select class="form-control" @bind="SelectedGroupId">
                            @foreach (Group group in ExistingGroups)
                            {
                                <option value="@group.Id"> @group.Name </option>
                            }
                        </select>
                        <!-- Button to save the node -->
                        <button class="btn btn-primary" @onclick="SaveJob">
                            Save
                        </button>
                        <!-- Only show delete button if not a new record -->
                        @if (IsEditJob)
                        {
                            <!-- Button to delete the node -->
                            <button class="btn btn-danger"
                                    @onclick="DeleteJob">
                                Delete
                            </button>
                        }
                        <br/>
                        <span style="color:red">@ErrorMessage</span>
                    </div>
                </div>
            </div>
        </div>
    }
    <button class="btn btn-success" @onclick="CreateJob">Create Job</button>
</AuthorizeView>

@code
{
    private List<Job> ExistingJobs = new List<Job>();
    private List<Group> ExistingGroups = new List<Group>();
    private Job CurrentJob = new Job();
    private bool IsEditJob { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;
    private bool ShowPopup { get; set; } = false;
    private string DialogTitle { get; set; } = "New Job";
    private int SelectedGroupId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetNodes();
        await GetJobs();
    }

    private async void ClosePopup()
    {
        ShowPopup = false;
        CurrentJob = new Job();
        IsEditJob = false;
        ErrorMessage = string.Empty;

        ExistingGroups = ExistingGroups.Select(c => { c.IsChecked = false; return c; }).ToList();

        StateHasChanged();

        await GetJobs();
    }

    private void CreateJob()
    {
        DialogTitle = "New Job";
        ShowPopup = true;
    }

    private async void DeleteJob()
    {
        await jobsMethods.DeleteJobAsync(CurrentJob.Id);
        ClosePopup();
    }

    private async void SaveJob()
    {
        //Edit
        if (IsEditJob)
        {
            CurrentJob.GroupId = SelectedGroupId;
            var response = await jobsMethods.EditJobAsync(CurrentJob.Id, CurrentJob);
            if (response != null)
            {
                ClosePopup();
            }
            else ErrorMessage = $"Error: Could not edit this job";
        }
        else //New
        {
            var job = new Job { Path = CurrentJob.Path, Parameters = CurrentJob.Parameters, Status = JobStatus.Waiting, GroupId = SelectedGroupId };

            var response = await jobsMethods.CreateJobAsync(job);
            if (response)
                ClosePopup();
            else ErrorMessage = $"Error: Could not create this job";
        }
    }

    private async Task GetJobs()
    {
        ExistingJobs = (await jobsMethods.GetJobsAsync()).ToList();

        StateHasChanged();
    }

    private async Task GetNodes()
    {
        ExistingGroups = (await groupsMethods.GetGroupsAsync()).ToList();
    }

    private void EditJob(Job job)
    {
        DialogTitle = "Edit Job";
        CurrentJob = job;
        IsEditJob = true;
        if (job.Group != null)
        {
            if (job.GroupId.HasValue)
                SelectedGroupId = job.GroupId.Value;
        }
        ShowPopup = true;
    }
}