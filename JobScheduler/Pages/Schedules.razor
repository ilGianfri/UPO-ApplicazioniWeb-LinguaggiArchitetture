@page "/schedules"
@inject SchedulesMethods schedulesMethods
@inject JobsMethods jobMethods

<AuthorizeView Roles="Admin, Editor">
    <h3>Schedules</h3>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>When</th>
                <th>Job</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Schedule schedule in ExistingSchedules)
            {
                <tr>
                    <td>@schedule.Id</td>
                    <td>
                        @if (!string.IsNullOrEmpty(schedule.Cron))
                        {<span>@ExpressionDescriptor.GetDescription(schedule.Cron);</span>}
                </td>
                <td>@schedule.Job.Path</td>
                <td>
                    <button class="btn btn-primary"
                            @onclick="(() => { IsEditSchedule = true; EditSchedule(schedule); })">
                        Edit
                    </button>
                </td>
                <td>
                    <button class="btn btn-primary"
                            @onclick="(() => { IsEditSchedule = true; EditSchedule(schedule); })">
                        Run Now
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    @if (ShowPopup)
    {
        <!-- This is the popup to create or edit a schedule -->
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">@DialogTitle</h3>
                        <!-- Button to close the popup -->
                        <button type="button" class="close"
                                @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <!-- Edit form for the current schedule -->
                    <div class="modal-body">
                        <!-- Only show Id if not a new schedule -->
                        @if (CurrentSchedule.Id != 0)
                        {
                            <p>Id: @CurrentSchedule.Id</p>
                        }
                        When: <input class="form-control" type="text"
                                     placeholder="CRON"
                                     @bind="CurrentSchedule.Cron" />
                        Job: <select class="form-control" @bind="SelectedId">
                            @foreach (Job job in AvailableJobs)
                            {
                                <option value="@job.Id"> @job.Path </option>
                            }
                        </select>
                        <!-- Button to save the schedule -->
                        <button class="btn btn-primary"
                                @onclick="SaveSchedule">
                            Save
                        </button>
                        <!-- Only show delete button if not a new record -->
                        @if (IsEditSchedule)
                        {
                            <!-- Button to delete the schedule -->
                            <button class="btn btn-danger"
                                    @onclick="DeleteSchedule">
                                Delete
                            </button>
                        }
                        <br />
                        <span style="color:red">@ErrorMessage</span>
                    </div>
                </div>
            </div>
        </div>
    }
    <button class="btn btn-success" @onclick="CreateSchedule">Create Schedule</button>
</AuthorizeView>

@code {
    private List<Schedule> ExistingSchedules = new List<Schedule>();
    private Schedule CurrentSchedule = new Schedule();
    private bool IsEditSchedule { get; set; } = false;
    private bool ShowPopup { get; set; } = false;
    private string DialogTitle { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    private int SelectedId { get; set; } = -1;
    private List<Job> AvailableJobs = new List<Job>();

    protected override async Task OnInitializedAsync()
    {
        AvailableJobs = (await jobMethods.GetJobsAsync()).ToList();

        GetSchedules();
    }

    private async void GetSchedules()
    {
        ExistingSchedules = (await schedulesMethods.GetSchedulesAsync()).ToList();

        StateHasChanged();
    }

    private void ClosePopup()
    {
        ShowPopup = false;
        IsEditSchedule = false;
        ErrorMessage = string.Empty;
        CurrentSchedule = new Schedule();
        SelectedId = 0;

        StateHasChanged();

        GetSchedules();
    }

    private void CreateSchedule()
    {
        DialogTitle = "New Schedule";
        ShowPopup = true;
    }

    private async void SaveSchedule()
    {
        if (CrontabSchedule.TryParse(CurrentSchedule.Cron) == null)
        {
            ErrorMessage = $"Error: The specified CRON syntax is not valid.";
            return;
        }

        //Edit
        if (IsEditSchedule)
        {
            var response = await schedulesMethods.EditScheduleAsync(CurrentSchedule.Id, CurrentSchedule);
            if (response != null)
            {
                ClosePopup();
            }
            else ErrorMessage = $"Error: Could not edit this schedule";
        }
        else //New
        {
            if (SelectedId == -1)
            {
                ErrorMessage = $"Error: You must select a job";
                return;
            }

            var schedule = new Schedule { Job = AvailableJobs.FirstOrDefault(x => x.Id == SelectedId), Cron = CurrentSchedule.Cron };
            var response = await schedulesMethods.CreateScheduleAsync(schedule);
            if (response != null)
                ClosePopup();
            else ErrorMessage = $"Error: Could not create this schedule";
        }
    }

    private async void DeleteSchedule()
    {
        await schedulesMethods.DeleteScheduleAsync(CurrentSchedule.Id);
        ClosePopup();
    }

    private void EditSchedule(Schedule schedule)
    {
        DialogTitle = "Edit Schedule";
        CurrentSchedule = schedule;

        var job = AvailableJobs.FirstOrDefault(x => x.Id == schedule.Id);
        if (job != null)
            SelectedId = job.Id;

        ShowPopup = true;
    }
}
