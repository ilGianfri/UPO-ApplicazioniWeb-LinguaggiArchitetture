@page "/administration"
@inject HttpClient httpClient
@inject RoleManager<IdentityRole> RoleManager
@inject UserManager<IdentityUser> UserManager
@inject IHttpContextAccessor httpContextAccessor

    <AuthorizeView Roles="Admin">
        <h3>Administration</h3>

        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>User Name</th>
                    <th>Email</th>
                    <th>Role</th>
                </tr>
            </thead>
            <tbody>
                @foreach (UserWithRole user in Users)
                {
                    <tr>
                        <td>@user.User.Id.Substring(0, 10) ...</td>
                        <td>@user.User.UserName</td>
                        <td>@user.User.Email</td>
                        <td>@user.Role</td>
                        <td>
                            <button class="btn btn-primary"
                                    @onclick="(() => { IsEditUser = true; EditUser(user); })">
                                Edit
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (ShowPopup)
        {
            <!-- This is the popup to create or edit a user -->
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Edit User</h3>
                            <!-- Button to close the popup -->
                            <button type="button" class="close"
                                    @onclick="ClosePopup">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <!-- Edit form for the current user -->
                        <div class="modal-body">
                            <!-- Only show Id if not a new user -->
                            @if (currentDetailsUser.User.Id != "")
                            {
                                <p>@currentDetailsUser.User.Id</p>
                            }
                            <!-- Only allow edit if a new user -->
                            @if (currentDetailsUser.User.Id != "")
                            {
                                <p>@currentDetailsUser.User.UserName</p>
                            }
                            else
                            {
                                <input class="form-control" type="text"
                                       placeholder="UserName"
                                       @bind="currentDetailsUser.User.UserName" />
                            }
                            <input class="form-control" type="text"
                                   placeholder="Email"
                                   @bind="currentDetailsUser.User.Email" />
                            <input class="form-control" type="password"
                                   placeholder="Password"
                                   @bind="currentDetailsUser.User.PasswordHash" />
                            <select class="form-control"
                                    @bind="@CurrentUserRole">
                                @foreach (IdentityRole option in AvailableRoles)
                                {
                                    <option value="@option.Name">
                                        @option.Name
                                    </option>
                                }
                            </select>
                            <br /><br />
                            <!-- Button to save the user -->
                            <button class="btn btn-primary"
                                    @onclick="SaveUser">
                                Save
                            </button>
                            <!-- Only show delete button if not a new record -->
                            @if (currentDetailsUser.User.Id != "")
                            {
                                <!-- Button to delete the forecast -->
                                <button class="btn btn-danger"
                                        @onclick="DeleteUser">
                                    Delete
                                </button>
                            }
                            <br />
                            <span style="color:red">@strError</span>
                        </div>
                    </div>
                </div>
            </div>
        }
        <button class="btn btn-success" @onclick="AddNewUser">Add User</button>

        @code {
            //List of users
            List<UserWithRole> Users = new List<UserWithRole>();
            //To show or hide the popup
            bool ShowPopup = false;
            // Property used to add or edit the currently selected user
            UserWithRole currentDetailsUser = new UserWithRole();
            //To show erros
            string strError = "";
            // Tracks the selected role for the currently selected user
            string CurrentUserRole { get; set; }
            // Possible user roles
            List<IdentityRole> AvailableRoles = new List<IdentityRole>();
            bool IsEditUser = false;

            void ClosePopup()
            {
                ShowPopup = false;
                IsEditUser = false;
            }

            protected override async Task OnInitializedAsync()
            {
                AvailableRoles = RoleManager.Roles.ToList();
                await GetUsers();
            }

            private async Task GetUsers()
            {
                if (!httpClient.DefaultRequestHeaders.Contains("Authorization"))
                    httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {httpContextAccessor.HttpContext.Request.Cookies["JWToken"]}");
                Users = await httpClient.GetFromJsonAsync<List<UserWithRole>>("https://localhost:44383/api/users");
            }

            private void AddNewUser()
            {

                currentDetailsUser = new UserWithRole();
                ShowPopup = true;
            }

            private void EditUser(UserWithRole user)
            {
                currentDetailsUser = user;
                CurrentUserRole = user.Role;
                ShowPopup = true;
            }

            private async Task DeleteUser()
            {
                ShowPopup = false;

                if (!httpClient.DefaultRequestHeaders.Contains("Authorization"))
                    httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {httpContextAccessor.HttpContext.Request.Cookies["JWToken"]}");

                await httpClient.DeleteAsync($"https://localhost:44383/api/users/{currentDetailsUser.User.Id}");

                await GetUsers();
            }

            private async Task SaveUser()
            {
                //Existing user
                if (IsEditUser)
                {
                    if (!httpClient.DefaultRequestHeaders.Contains("Authorization"))
                        httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {httpContextAccessor.HttpContext.Request.Cookies["JWToken"]}");

                    var response = await httpClient.PutAsJsonAsync($"https://localhost:44383/api/users/{currentDetailsUser.User.Id}", new UserWithRole() { User = currentDetailsUser.User, Role = CurrentUserRole });

                    if (response.IsSuccessStatusCode)
                    {
                        ShowPopup = false;
                    }
                    else strError = "Error: Cannot set new password";
                }
                else
                {
                    var user = new IdentityUser { UserName = currentDetailsUser.User.Email, Email = currentDetailsUser.User.Email, PasswordHash = currentDetailsUser.User.PasswordHash };

                    if (!httpClient.DefaultRequestHeaders.Contains("Authorization"))
                        httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {httpContextAccessor.HttpContext.Request.Cookies["JWToken"]}");

                    var response = await httpClient.PostAsJsonAsync("https://localhost:44383/api/users", new UserWithRole() { User = user, Role = CurrentUserRole });
                    if (response.IsSuccessStatusCode)
                        ShowPopup = false;
                    else strError = "Error: Something went wrong.";
                }
            }
        }
    </AuthorizeView>