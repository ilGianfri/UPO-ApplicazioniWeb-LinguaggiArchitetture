@page "/administration"
@inject RoleManager<IdentityRole> RoleManager
@inject UserMethods userMethods

<AuthorizeView Roles="Admin">
    <h3>Administration</h3>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>User Name</th>
                <th>Email</th>
                <th>Role</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (UserWithRole user in Users)
            {
                <tr>
                    <td>@user.User.Id</td>
                    <td>@user.User.UserName</td>
                    <td>@user.User.Email</td>
                    <td>@user.Role</td>
                    <td>
                        <button class="btn btn-primary"
                                @onclick="(() => { IsEditUser = true; EditUser(user); })">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (ShowPopup)
    {
        <!-- This is the popup to create or edit a user -->
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">@DialogTitle</h3>
                        <!-- Button to close the popup -->
                        <button type="button" class="close"
                                @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <!-- Edit form for the current user -->
                    <div class="modal-body">
                        <!-- Only show Id if not a new user -->
                        @if (CurrentDetailsUser.User.Id != "")
                        {
                            <p>Id: @CurrentDetailsUser.User.Id</p>
                        }
                        <!-- Only allow edit if a new user -->
                        @if (CurrentDetailsUser.User.Id != "")
                        {
                            <p>@CurrentDetailsUser.User.UserName</p>
                        }
                        else
                        {
                        UserName: <input class="form-control" type="text"
                                         placeholder="UserName"
                                         @bind="CurrentDetailsUser.User.UserName" />
                        }
                        Email: <input class="form-control" type="text"
                                      placeholder="Email"
                                      @bind="CurrentDetailsUser.User.Email" />
                        Password: <input class="form-control" type="password"
                                         placeholder="Password"
                                         @bind="CurrentDetailsUser.User.PasswordHash" />
                        Role: <select class="form-control"
                                      @bind="@CurrentUserRole">
                            @foreach (IdentityRole option in AvailableRoles)
                            {
                                <option value="@option.Name">
                                    @option.Name
                                </option>
                            }
                        </select>
                        <br /><br />
                        <!-- Button to save the user -->
                        <button class="btn btn-primary"
                                @onclick="SaveUser">
                            Save
                        </button>
                        <!-- Only show delete button if not a new record -->
                        @if (IsEditUser)
                        {
                            <!-- Button to delete the user -->
                            <button class="btn btn-danger"
                                    @onclick="DeleteUser">
                                Delete
                            </button>
                        }
                        <br />
                        <span style="color:red">@ErrorMessage</span>
                    </div>
                </div>
            </div>
        </div>
    }
    <button class="btn btn-success" @onclick="AddNewUser">Add User</button>

    @code {
        private string DialogTitle = "New User";
        //List of users
        private List<UserWithRole> Users = new List<UserWithRole>();
        //To show or hide the popup
        private bool ShowPopup { get; set; } = false;
        // Property used to add or edit the currently selected user
        private UserWithRole CurrentDetailsUser = new UserWithRole();
        //To show erros
        private string ErrorMessage = string.Empty;
        // Tracks the selected role for the currently selected user
        private string CurrentUserRole { get; set; }
        // Possible user roles
        private List<IdentityRole> AvailableRoles = new List<IdentityRole>();
        private bool IsEditUser = false;

        private async void ClosePopup()
        {
            ShowPopup = false;
            IsEditUser = false;
            CurrentDetailsUser = new UserWithRole();
            ErrorMessage = string.Empty;

            StateHasChanged();

            await GetUsers();
        }

        protected override async Task OnInitializedAsync()
        {
            AvailableRoles = RoleManager.Roles.ToList();
            await GetUsers();
        }

        private async Task GetUsers()
        {
            Users = (await userMethods.GetUsersAsync()).ToList();

            StateHasChanged();
        }

        private void AddNewUser()
        {
            CurrentDetailsUser = new UserWithRole();
            ShowPopup = true;
            DialogTitle = "New User";
        }

        private void EditUser(UserWithRole user)
        {
            CurrentDetailsUser = user;
            CurrentUserRole = user.Role;
            ShowPopup = true;
            DialogTitle = "Edit User";
        }

        private async Task DeleteUser()
        {
            //Don't delete the user if there's a single admin
            if (CurrentDetailsUser.Role == "Admin" && Users.Where(x => x.Role == "Admin").ToList().Count == 1)
            {
                ErrorMessage = "Cannot delete the selected account because it's the only admin";
                return;
            }
     
             ShowPopup = false;

             await userMethods.DeleteUserAsync(CurrentDetailsUser.User.Id);

             await GetUsers();          
        }

        private async Task SaveUser()
        {
            //Existing user
            if (IsEditUser)
            {
                var editedUser = await userMethods.EditUserAsync(CurrentDetailsUser.User.Id, new UserWithRole() { User = CurrentDetailsUser.User, Role = CurrentUserRole });
                if (editedUser != null)
                {
                    ClosePopup();
                }
                else ErrorMessage = "Error: Something went wrong while editing this user.";
            }
            else //New user
            {
                var user = new IdentityUser { UserName = CurrentDetailsUser.User.Email, Email = CurrentDetailsUser.User.Email, PasswordHash = CurrentDetailsUser.User.PasswordHash };


                var response = await userMethods.CreateUserAsync(new UserWithRole() { User = user, Role = CurrentUserRole });
                if (response)
                    ClosePopup();
                else ErrorMessage = "Error: Something went wrong.";
            }

            await GetUsers();
        }
    }
</AuthorizeView>